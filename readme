# Projet CI/CD & Infrastructure pour API Mobile

## 1. Pr√©sentation du projet

Ce d√©p√¥t met en place un pipeline CI/CD complet et une infrastructure as code pour d√©ployer une API REST destin√©e √† une application mobile.  
Il couvre : provisionnement, configuration des serveurs, d√©ploiement automatis√©, monitoring, sauvegardes, rollback et gestion de versions.

**Stack technique :**  
- Node.js + Express  
- Terraform (infra GCP)  
- Ansible (config des VM)  
- GitHub Actions (CI/CD)  
- Prometheus (+ Grafana)  
- GitFlow  
- Snapshots GCP & script rollback  
- SemVer + tags automatiques  

---

## 2. GitFlow

| Branche       | R√¥le                                         |
|---------------|----------------------------------------------|
| `main`        | Production stable                            |
| `develop`     | Int√©gration & staging                        |
| `feature/*`   | Nouvelles fonctionnalit√©s                    |
| `release/*`   | Pr√©paration d‚Äôune version                    |
| `hotfix/*`    | Corrections urgentes en production           |

**Commandes cl√©s :**
```bash
git checkout main
git pull origin main
git checkout -b develop
git push -u origin develop

git checkout develop
git checkout -b feature/ma-fonctionnalite
git push -u origin feature/ma-fonctionnalite
```

---

## 3. Infrastructure as Code

**√Ä venir :**  
Scripts Terraform dans `terraform/` pour provisionner :  
- VPC, firewall (ports 22, 3000)  
- VM Compute Engine (`api-vm`)  
- Backend d‚Äô√©tat dans un bucket GCS  

---

## 4. Configuration serveur (Ansible)

Playbooks dans `ansible/` :  
- Installation de Git, Node.js  
- D√©ploiement de l‚ÄôAPI (`deploy.yml`)  
- Installation et configuration de Prometheus  

---

## 5. Pipeline CI/CD (GitHub Actions)

Fichier : `.github/workflows/deploy.yml`

### √âtapes r√©alis√©es  
1. Checkout du code  
2. Chargement de la cl√© SSH (`ssh-agent`)  
3. Ajout de l‚Äôh√¥te √† `known_hosts`  
4. Ex√©cution de `release.sh` sur la VM  

### √Ä compl√©ter  
- Lint & tests  
- Build & packaging  
- D√©ploiement staging  
- Snapshot avant prod  
- Job rollback automatique  

---

## 6. Versionnement & Release

Le script `release.sh` (dans `api/`) effectue :  
1. Clonage propre du repo  
2. G√©n√©ration d‚Äôun tag `release-YYYYMMDDHHMMSS`  
3. Mise √† jour de `CHANGELOG.md`  
4. D√©ploiement via Ansible  

---

## 7. Monitoring & Logs

- Endpoint `/metrics` expos√© via `express-prometheus-middleware`  
- Config Prometheus : `/etc/prometheus/prometheus.yml`
  ```yaml
  global:
    scrape_interval: 15s

  scrape_configs:
    - job_name: 'api-node'
      static_configs:
        - targets: ['localhost:3000']
  ```
- **√Ä venir :** dashboards Grafana, alertes  

---

## 8. Sauvegardes & Rollback

### Snapshots  
> √Ä automatiser dans pipeline  
Commande gcloud pour snapshot du disque avant d√©ploiement.

### Rollback  
Script `rollback/rollback.sh` :
```bash
#!/bin/bash
set -e
if [ -z "$1" ]; then
  echo "Usage: $0 <tag>"
  exit 1
fi
TAG=$1
cd ~/api
pkill -f index.js || true
git fetch --all --tags
git checkout $TAG
nohup node index.js > api.log 2>&1 &
sleep 5
curl -s http://localhost:3000/ | grep -q "API de test d√©ploy√©e avec succ√®s" \
  && echo "‚úÖ Rollback vers $TAG r√©ussi" \
  || (echo "‚ö†Ô∏è Rollback √©chou√©"; exit 1)
```

Lancer : `ssh amaur@34.38.9.249 'bash ~/rollback/rollback.sh <tag>'`

---

## 9. Gestion des secrets

- **GitHub Secrets** : `SSH_PRIVATE_KEY`, `SSH_HOST`, `SSH_USER`  
- Fichiers `.env` (non commit) pour variables d‚Äôenv  
- Inventaires Ansible distincts pour staging/prod  

---

## 10. Proc√©dures

### D√©ploiement
1. Push sur `develop`  
2. Cr√©ation de `release/x.y.z`  
3. Merge dans `main` ‚Üí d√©clenche CI/CD  

### Rollback
```bash
ssh amaur@34.38.9.249 'bash ~/rollback/rollback.sh <tag>'
```

### Validation
- Logs API : `tail -f ~/api/api.log`  
- M√©triques : `curl http://34.38.9.249:3000/metrics`  
- VM status : `gcloud compute instances list`  

---

> **Statut :**  
> ‚úÖ API d√©ploy√©e & script release  
> ‚úÖ GitFlow de base  
> ‚úÖ Monitoring Prometheus  
> ‚úÖ Script rollback op√©rationnel  
> üöß Terraform, tests CI, snapshots et Grafana en cours  
